/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * IDE.java
 *
 * Created on 17/10/2009, 03:09:40 PM
 */

package vectores;

import java.awt.Toolkit;
import java.util.StringTokenizer;

/**
 *
 * @author Jose
 */
public class IDE extends javax.swing.JFrame {

    public final static int NINGUNA = 0;
    public final static int CRUZ = 1;
    public final static int PUNTO = 2;

    public final static int ESCALAR = 3;
    public final static int VECTOR = 4;
    /** Creates new form IDE */
    public IDE() {
        initComponents();
        this.setLocation((int)((Toolkit.getDefaultToolkit().getScreenSize().getWidth()-this.getWidth())/2), (int)((Toolkit.getDefaultToolkit().getScreenSize().getHeight()-this.getHeight())/2));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaEntrada = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaSalida = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        jTextAreaEntrada.setColumns(20);
        jTextAreaEntrada.setRows(5);
        jTextAreaEntrada.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextAreaEntradaKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTextAreaEntrada);

        jTextAreaSalida.setColumns(20);
        jTextAreaSalida.setRows(5);
        jScrollPane2.setViewportView(jTextAreaSalida);

        jLabel1.setText("Entrada:");

        jLabel2.setText("Salida:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(9, 9, 9)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextAreaEntradaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextAreaEntradaKeyReleased
        String cadena = jTextAreaEntrada.getText();
        switch(evt.getKeyChar())
        {
            case '<':
                jTextAreaEntrada.setText(cadena+="A,B,C>");
                break;
            case'(':
                jTextAreaEntrada.setText(cadena+="N)");
                break;
            case 'x':
            case 'X':
                jTextAreaEntrada.setText(cadena+=" <A,B,C>");
                break;
        }
        if(analizar()==null)
        {
            procesar();
        }
        else
        {
            jTextAreaSalida.setText(analizar());
        }
    }//GEN-LAST:event_jTextAreaEntradaKeyReleased

    public void procesar()
    {
        String salida = "";
        try
        {
            int escalarTemp=1;
            int[] vectorTemp=new int[3];
            int operacion = NINGUNA;
            int ultimoResultado = NINGUNA;
            StringTokenizer miToken = new StringTokenizer(jTextAreaEntrada.getText()," \n");
            while(miToken.hasMoreTokens())
            {
                String segmento = miToken.nextToken();
                StringTokenizer temp;
                int [] vectorDeEntrada;
                switch(segmento.charAt(0))
                {
                    case '<':
                        segmento=segmento.substring(1, segmento.length()-1);
                        temp = new StringTokenizer(segmento, ",");
                        vectorDeEntrada = new int[]
                        {
                            Integer.parseInt(temp.nextToken()),
                            Integer.parseInt(temp.nextToken()),
                            Integer.parseInt(temp.nextToken())
                        };
                        switch(operacion)
                        {
                            case NINGUNA:
                                vectorTemp=vectorDeEntrada;
                                ultimoResultado=VECTOR;
                                break;
                            case PUNTO:
                                if(ultimoResultado==VECTOR)
                                {
                                    escalarTemp = productoPunto(vectorTemp,vectorDeEntrada);
                                    salida+="<"+vectorTemp[0]+","+vectorTemp[1]+","+vectorTemp[2]+"> . <"+
                                            vectorDeEntrada[0]+","+vectorDeEntrada[1]+","+vectorDeEntrada[2]+"> = ("
                                            +escalarTemp+")\n";
                                    ultimoResultado=ESCALAR;
                                }
                                else
                                {
                                    vectorTemp=escalarVector(escalarTemp, vectorDeEntrada);
                                    salida+=escalarTemp+" . <"+
                                            vectorDeEntrada[0]+","+vectorDeEntrada[1]+","+vectorDeEntrada[2]+"> = <"+
                                            vectorTemp[0]+","+vectorTemp[1]+","+vectorTemp[2]+">\n";
                                    ultimoResultado=VECTOR;
                                }
                                break;
                            case CRUZ:
                                if(ultimoResultado==VECTOR)
                                {
                                    salida+="<"+vectorTemp[0]+","+vectorTemp[1]+","+vectorTemp[2]+"> x <"+
                                            vectorDeEntrada[0]+","+vectorDeEntrada[1]+","+vectorDeEntrada[2]+"> = ";
                                    vectorTemp=productoCruz(vectorTemp, vectorDeEntrada);
                                    salida+="<"+vectorTemp[0]+","+vectorTemp[1]+","+vectorTemp[2]+">\n";
                                    ultimoResultado=VECTOR;
                                }
                                else
                                {
                                    vectorTemp=escalarVector(escalarTemp, vectorDeEntrada);
                                    salida+=escalarTemp+" . <"+
                                            vectorDeEntrada[0]+","+vectorDeEntrada[1]+","+vectorDeEntrada[2]+"> = <"+
                                            vectorTemp[0]+","+vectorTemp[1]+","+vectorTemp[2]+">\n";
                                    ultimoResultado=VECTOR;
                                }
                                break;
                        }
                        break;
                    case '(':
                        segmento=segmento.substring(1, segmento.length()-1);
                        switch(operacion)
                        {
                            case NINGUNA:
                                escalarTemp = Integer.parseInt(segmento);
                                ultimoResultado = ESCALAR;
                                break;
                            case PUNTO:
                            case CRUZ:
                                if(ultimoResultado==ESCALAR)
                                {
                                    salida+="("+escalarTemp+") . ("+segmento+") = (";
                                    escalarTemp*=Integer.parseInt(segmento);
                                    salida+=escalarTemp+")\n";
                                    ultimoResultado=ESCALAR;
                                }
                                else
                                {
                                    salida+="("+segmento+") . <"+
                                            vectorTemp[0]+","+vectorTemp[1]+","+vectorTemp[2]+"> = <";
                                    vectorTemp=escalarVector(Integer.parseInt(segmento), vectorTemp);
                                    salida+=vectorTemp[0]+","+vectorTemp[1]+","+vectorTemp[2]+">\n";
                                }
                                break;
                        }
                        break;
                }
                if(miToken.hasMoreTokens())
                {
                    String siguienteOperacion = miToken.nextToken();
                    if(siguienteOperacion.compareToIgnoreCase("x")==0)
                        operacion=CRUZ;
                    if(siguienteOperacion.compareTo(".")==0)
                        operacion=PUNTO;
                }
            }
            salida+="\nSuperioridad de la JWCORPORACION";
        }
        catch(Exception e)
        {
            salida = "Error Inexperado tipo 2";
        }
        jTextAreaSalida.setText(salida);
    }

    public String analizar()
    {
        try
        {
            StringTokenizer miToken = new StringTokenizer(jTextAreaEntrada.getText()," \n");
            while(miToken.hasMoreTokens())
            {
                String segmento = miToken.nextToken();
                switch(segmento.charAt(0))
                {
                    case '<':
                        if(segmento.charAt(segmento.length()-1)!='>')
                        {
                            return "Se esperaba MayorQue";
                        }
                        segmento=segmento.substring(1,segmento.length()-1);
                        StringTokenizer TokenIJK = new StringTokenizer(segmento,",");
                        try
                        {
                            Integer.parseInt(TokenIJK.nextToken());
                            Integer.parseInt(TokenIJK.nextToken());
                            Integer.parseInt(TokenIJK.nextToken());
                            if(TokenIJK.hasMoreTokens())
                                return "Error en elementos del vector, hay mas de 3";
                            if(miToken.hasMoreTokens())
                            {
                                String elProximo = miToken.nextToken();
                                if(!(elProximo.equals(".") || elProximo.equals("x") || elProximo.equals("X")))
                                {
                                    return "Se esperaba PUNTO o X";
                                }
                            }
                        }
                        catch(Exception e)
                        {
                            return "Error en elementos del vector";
                        }
                        break;
                    case '(':
                        if(segmento.charAt(segmento.length()-1)!=')')
                        {
                            return "Se esperaba parentesis";
                        }
                        try
                        {
                            segmento=segmento.substring(1, segmento.length()-1);
                            Integer.parseInt(segmento);
                            if(miToken.hasMoreTokens())
                            {
                                String elProximo = miToken.nextToken();
                                if(!(elProximo.equals(".") || elProximo.equals("x") || elProximo.equals("X")))
                                {
                                    return "Se esperaba PUNTO o X";
                                }
                            }
                        }catch(Exception e)
                        {
                            return "Se esperaba un numero";
                        }
                        break;
                    default:
                        return "Caracter no valido";
                }
            }
        }
        catch(Exception e)
        {
            return "Error Inexperadisimo!! por favor informe de el";
        }
        return null;
    }

    public int[] productoCruz(int[]vectorA, int[]vectorB)
    {
        int[] retorno= new int[3];

        retorno[0] = (vectorA[1]*vectorB[2]-vectorB[1]*vectorA[2]);
        retorno[1] = (vectorB[0]*vectorA[2]-vectorA[0]*vectorB[2]);
        retorno[2] = (vectorA[0]*vectorB[1]-vectorB[0]*vectorA[1]);

        return retorno;
    }

    public int productoPunto(int[]vectorA, int[]vectorB)
    {
        int i = vectorA[0]*vectorB[0];
        int j = vectorA[1]*vectorB[1];
        int k = vectorA[2]*vectorB[2];
        return (i+j+k);
    }

    public int[] escalarVector(int x,int[]vector)
    {
        int[] vectorA = new int[]{vector[0],vector[1],vector[2]};

        vectorA[0]*=x;
        vectorA[1]*=x;
        vectorA[2]*=x;

        return vectorA;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextAreaEntrada;
    private javax.swing.JTextArea jTextAreaSalida;
    // End of variables declaration//GEN-END:variables

}